---
monitoring:
  cache:
    refresh-rate: 60000    # interval de refresh du back en ms
  refresh:
    interval: 3000000       # interval de refersh du front en ms
---
gitlab:
  url: "https://gitlab.com"
  token: ${GITLAB_TOKEN}
---
server:
  port: 8080
environments:
  development:
    server:
      port: 9999
    management:
      endpoints:
        enabled-by-default: false


spring:
  groovy:
    template:
      check-template-location: false
---
dataSource:
  pooled: true
  jmxExport: true

---
environments:
  production:
    logging:
      config: "classpath:logback.xml"
---

dataSource:
  dbCreate: create-drop
  url: jdbc:h2:mem:devDb;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
  driverClassName: org.h2.Driver
  username: sa
  password: ''
environments:
  integration:
    dataSource:
      dbCreate: update
      url: jdbc:postgresql://localhost:5432/ora_test
      driverClassName: org.postgresql.Driver
      username: ora_user
      password: ora_pass
      dialect: org.hibernate.dialect.PostgreSQLDialect
#    dataSource:
#      dbCreate: none
#      url: jdbc:postgresql://${JDBC_DATABASE_URL:localhost:5432/ora}
#      driverClassName: org.postgresql.Driver
#      username: ${JDBC_DATABASE_USERNAME:ora_user}
#      password: ${JDBC_DATABASE_PASSWORD:ora_pass}
#      dialect: org.hibernate.dialect.PostgreSQLDialect
#      properties:
#        jmxEnabled: true
#        initialSize: 5
#        maxActive: 50
#        minIdle: 5
#        maxIdle: 25
#        maxWait: 10000
#        maxAge: 600000
#        timeBetweenEvictionRunsMillis: 5000
#        minEvictableIdleTimeMillis: 60000
#        validationQuery: SELECT 1
#        validationQueryTimeout: 3
#        validationInterval: 15000
#        testOnBorrow: true
#        testWhileIdle: true
#        testOnReturn: false
#        defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED
#        dbProperties:
#          autoReconnect: true
---
grails:
  plugin:
    springsecurity:
      active: true
      password:
        algorithm: 'bcrypt'
      userLookup:
        userDomainClassName: 'ora.auth.User'
        authorityJoinClassName: 'ora.auth.UserRole'
      authority:
        className: 'ora.auth.Role'
      securityConfigType: "Annotation"
      rejectIfNoRule: false
      rejectPublicInvocations: false
      filterChain:
        chainMap:
          - pattern: '/assets/**'
            filters: 'none'
          - pattern: '/**/js/**'
            filters: 'none'
          - pattern: '/**/css/**'
            filters: 'none'
          - pattern: '/**/images/**'
            filters: 'none'
          - pattern: '/**/favicon.ico'
            filters: 'none'
          - pattern: '/auth/login'
            filters: 'none'
          - pattern: '/monitoring-ws/**'
            filters: 'none'
            security: 'none'
          - pattern: '/**'
            filters: 'JOINED_FILTERS'
      controllerAnnotations:
        staticRules:
          - pattern: '/assets/**'
            access: ['permitAll']
          - pattern: '/**/js/**'
            access: ['permitAll']
          - pattern: '/**/css/**'
            access: ['permitAll']
          - pattern: '/**/images/**'
            access: ['permitAll']
          - pattern: '/**/favicon.ico'
            access: ['permitAll']
          - pattern: '/auth/login'
            access: ['permitAll']
          - pattern: '/logout/**'
            access: ['permitAll']
          - pattern: '/error'
            access: ['permitAll']
          - pattern: '/monitoring-ws/**'
            access: ['permitAll']
            position: 1
          - pattern: '/'
            access: ['ROLE_USER']
          - pattern: '/monitoring/**'
            access: ['ROLE_USER']
      auth:
        loginFormUrl: '/auth/login'
        ajaxLoginFormUrl: '/auth/login'
        useForward: false
        loginFormContentType: 'text/html'
      apf:
        filterProcessesUrl: '/j_spring_security_check'
        usernameParameter: 'j_username'
        passwordParameter: 'j_password'
      successHandler:
        defaultTargetUrl: '/monitoring'
        alwaysUseDefault: true
      failureHandler:
        defaultFailureUrl: '/login/auth?login_error=1'
      logout:
        postOnly: false
        afterLogoutUrl: '/'
---
info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'
grails:
  ansi:
    enabled: false
  mime:
    disable:
      accept:
        header:
          userAgents:
            - Gecko
            - WebKit
            - Presto
            - Trident
    types:
      all: '*/*'
      atom: application/atom+xml
      css: text/css
      csv: text/csv
      form: application/x-www-form-urlencoded
      html:
        - text/html
        - application/xhtml+xml
      js: text/javascript
      json:
        - application/json
        - text/json
      multipartForm: multipart/form-data
      pdf: application/pdf
      rss: application/rss+xml
      text: text/plain
      hal:
        - application/hal+json
        - application/hal+xml
      xml:
        - text/xml
        - application/xml
  views:
    gsp:
      encoding: UTF-8
      htmlcodec: xml
      codecs:
        expression: html
        scriptlet: html
        taglib: none
        staticparts: none
    default:
      codec: html
---
grails:
  assets:
    mapping: 'assets'
    includes:
      - '**/*.css'
      - '**/*.js'
      - '**/webfonts/*'
    excludes:
      - '**/*.gz'
      - '**/*.map'
    bundle: false
    minifyJs: true
    minifyCss: true
---
grails:
  plugin:
    springsecurity:
      password:
        algorithm: 'bcrypt'
        encodeHashAsBase64: true
        hash:
          iterations: 10
      rest:
        token:
          storage:
            jwt:
              secret: ${JWT_SECRET:pleaseChangeThisSecretForANewOne}
              expiration: 3600
          validation:
            useBearerToken: true
            headerName: 'Authorization'
        login:
          active: true
          endpointUrl: '/api/login'
          failureStatusCode: 401
          useJsonCredentials: true
          usernamePropertyName: username
          passwordPropertyName: password
        logout:
          endpointUrl: '/api/logout'
      filterChain:
        chainMap:
          - pattern: /assets/**
            filters: 'none'
          - pattern: /**/js/**
            filters: 'none'
          - pattern: /**/css/**
            filters: 'none'
          - pattern: /**/images/**
            filters: 'none'
          - pattern: /**/favicon.ico
            filters: 'none'
          - pattern: /api/**
            filters: 'JOINED_FILTERS,-anonymousAuthenticationFilter,-exceptionTranslationFilter,-authenticationProcessingFilter,-securityContextPersistenceFilter,-rememberMeAuthenticationFilter'
          - pattern: /auth/**
            filters: 'none'
          - pattern: /**
            filters: 'JOINED_FILTERS,-restTokenValidationFilter,-restExceptionTranslationFilter'
      userLookup:
        userDomainClassName: 'ora.auth.User'
        authorityJoinClassName: 'ora.auth.UserRole'
      authority:
        className: 'ora.auth.Role'
      controllerAnnotations:
        staticRules:
          - pattern: '/api/login'
            access: ['permitAll']
          - pattern: '/api/logout'
            access: ['isAuthenticated()']
          - pattern: '/api/validate'
            access: ['permitAll']
          - pattern: '/api/refresh'
            access: ['permitAll']
          - pattern: '/'
            access: ['IS_AUTHENTICATED_FULLY']
          - pattern: '/error'
            access: ['permitAll']
          - pattern: '/index'
            access: ['IS_AUTHENTICATED_FULLY']
          - pattern: '/index.gsp'
            access: ['IS_AUTHENTICATED_FULLY']
          - pattern: '/shutdown'
            access: ['permitAll']
          - pattern: '/assets/**'
            access: ['permitAll']
          - pattern: '/**/js/**'
            access: ['permitAll']
          - pattern: '/**/css/**'
            access: ['permitAll']
          - pattern: '/**/images/**'
            access: ['permitAll']
          - pattern: '/**/favicon.ico'
            access: ['permitAll']
          - pattern: '/api/login'
            access: ['permitAll']
          - pattern: '/api/logout'
            access: ['permitAll']
          - pattern: '/auth/**'
            access: ['permitAll']
          - pattern: '/private/open/healthCheck'
            access: ['permitAll']
